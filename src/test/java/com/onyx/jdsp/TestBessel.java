package com.onyx.jdsp;

import com.onyx.jdsp.filter.Bessel;
import org.junit.Test;
import static org.junit.Assert.*;

public class TestBessel {
    // 5Hz Sine + 15Hz Sine + 30Hz Sine sampled @ 100Hz with Nyquist of 50Hz
    private double[] signal = {0.0, 2.069, 0.951, 0.53, 1.314, 0.0, -0.588, 1.706, 2.127, 0.167, -0.0, -0.167, -2.127,
            -1.706, 0.588, 0.0, -1.314, -0.53, -0.951, -2.069, -0.0, 2.069, 0.951, 0.53, 1.314, 0.0, -0.588, 1.706,
            2.127, 0.167, -0.0,-0.167, -2.127, -1.706, 0.588, -0.0, -1.314, -0.53, -0.951, -2.069, -0.0, 2.069, 0.951,
            0.53, 1.314, 0.0,-0.588, 1.706, 2.127, 0.167, -0.0, -0.167, -2.127, -1.706, 0.588, 0.0, -1.314, -0.53,
            -0.951, -2.069, -0.0, 2.069, 0.951, 0.53, 1.314, 0.0, -0.588, 1.706, 2.127, 0.167, -0.0, -0.167, -2.127,
            -1.706, 0.588, 0.0, -1.314, -0.53, -0.951, -2.069, -0.0, 2.069, 0.951, 0.53, 1.314, 0.0, -0.588, 1.706,
            2.127, 0.167, -0.0, -0.167, -2.127, -1.706, 0.588, 0.0, -1.314, -0.53, -0.951, -2.069};

    private Bessel flt = new Bessel(this.signal, 100);

    @Test
    public void LowPassTest() {
        final double[] out = {0.0, 0.14, 0.647, 1.197, 1.197, 0.857, 0.553, 0.238, 0.368, 1.129, 1.413, 0.677, -0.235,
                -0.925, -1.4, -1.104, -0.285, -0.141, -0.676, -1.039, -1.164, -0.92, 0.137, 1.228, 1.309, 0.857, 0.527,
                0.238, 0.374, 1.129, 1.411, 0.677, -0.234, -0.925, -1.4, -1.104, -0.285, -0.141, -0.676, -1.039, -1.164,
                -0.92, 0.137, 1.228, 1.309, 0.857, 0.527, 0.238, 0.374, 1.129, 1.411, 0.677, -0.234, -0.925, -1.4,
                -1.104, -0.285, -0.141, -0.676, -1.039, -1.164, -0.92, 0.137, 1.228, 1.309, 0.857, 0.527, 0.238, 0.374,
                1.129, 1.411, 0.677, -0.234,-0.925, -1.4, -1.104, -0.285, -0.141, -0.676, -1.039, -1.164, -0.92, 0.137,
                1.228, 1.309, 0.857, 0.527, 0.238, 0.374, 1.129, 1.411, 0.677, -0.234, -0.925, -1.4, -1.104, -0.285,
                -0.141, -0.676, -1.039};

        double[] result = flt.low_pass_filter(4, 9);
        assertArrayEquals(result, out, 0.001);
    }

    @Test
    public void HighPassTest() {
        final double[] out = {0.0, 0.64, -1.065, -0.108, 0.654, -0.411, 0.191, 1.11, -0.604, -1.312, 0.45, 0.512,
                -0.352, 0.776, 0.761,-1.248, -0.878, 0.734, 0.044, -0.187, 1.087, 0.094, -1.518, -0.206, 0.761,
                -0.267, 0.286, 1.142, -0.614, -1.338, 0.425, 0.496, -0.358, 0.775, 0.764, -1.245, -0.876, 0.735, 0.044,
                -0.187, 1.087, 0.094, -1.518, -0.206, 0.761, -0.267, 0.286, 1.142, -0.614, -1.338, 0.425, 0.496, -0.358,
                0.775, 0.764, -1.245, -0.876, 0.735, 0.044, -0.187, 1.087, 0.094, -1.518, -0.206, 0.761, -0.267, 0.286,
                1.142, -0.614, -1.338, 0.425, 0.496, -0.358, 0.775, 0.764, -1.245, -0.876, 0.735, 0.044, -0.187, 1.087,
                0.094, -1.518, -0.206, 0.761, -0.267,0.286, 1.142, -0.614, -1.338, 0.425, 0.496, -0.358, 0.775, 0.764,
                -1.245, -0.876, 0.735, 0.044, -0.187};

        double[] result = flt.high_pass_filter(4, 29);
        assertArrayEquals(result, out, 0.001);
    }

    @Test
    public void BandPassTest() {
        final double[] out = {0.0, 0.053, 0.186, 0.12, -0.312, -0.563, -0.248, 0.219, 0.589, 0.734, 0.149, -0.822,
                -0.94, -0.138, 0.608, 0.95, 0.755, -0.208, -1.106, -0.9, -0.043, 0.591, 0.843, 0.446, -0.585, -1.117,
                -0.534, 0.334, 0.854, 0.934, 0.249, -0.791, -0.964, -0.2, 0.537, 0.895, 0.722, -0.22, -1.102, -0.885,
                -0.025, 0.607, 0.855, 0.452,-0.584, -1.119, -0.538, 0.329, 0.85, 0.932, 0.248, -0.791, -0.964, -0.199,
                0.538, 0.896, 0.723, -0.22, -1.102, -0.886, -0.025, 0.607, 0.854, 0.451, -0.584, -1.119, -0.538, 0.329,
                0.85, 0.932, 0.248, -0.791, -0.964, -0.199, 0.538, 0.896, 0.723, -0.22, -1.102, -0.886, -0.025, 0.607,
                0.854, 0.451, -0.584, -1.119, -0.538, 0.329, 0.85, 0.932, 0.248, -0.791, -0.964, -0.199, 0.538, 0.896,
                0.723, -0.22, -1.102, -0.886};

        double[] result = flt.band_pass_filter(4, 12, 18);
        assertArrayEquals(result, out, 0.001);
    }

    @Test
    public void BandStopTest() {
        final double[] out = {0.0, 0.994, -0.333, 0.726, 1.576, 0.277, 0.591, 1.782, 0.533, -0.157, 1.256, 0.711,
                -0.912, -0.044, 0.343, -1.421, -1.314, -0.099, -1.206, -1.652, 0.151, 0.133, -0.914, 0.5, 1.381, 0.06,
                0.513, 1.9, 0.723, -0.027, 1.303, 0.717, -0.931, -0.108, 0.243, -1.498, -1.31, -0.016, -1.111, -1.61,
                0.126, 0.077, -0.958, 0.485,1.389, 0.078, 0.535, 1.919, 0.732, -0.036, 1.28, 0.696, -0.938, -0.096,
                0.262, -1.485, -1.31, -0.027, -1.122, -1.616, 0.128, 0.082, -0.953, 0.488, 1.389, 0.076, 0.531, 1.916,
                0.731, -0.034, 1.283, 0.697, -0.937,-0.097, 0.261, -1.486, -1.31, -0.026, -1.121, -1.615, 0.128, 0.082,
                -0.953, 0.487, 1.389, 0.076, 0.532, 1.917, 0.731, -0.034, 1.282, 0.697, -0.937, -0.097, 0.261, -1.486,
                -1.31, -0.026, -1.121, -1.615};

        double[] result = flt.band_stop_filter(4, 7, 28);
        assertArrayEquals(result, out, 0.001);
    }
}
