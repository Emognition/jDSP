package com.onyx.signal;

import org.junit.Test;
import static org.junit.Assert.assertArrayEquals;

public class TestDiscreteFourier {

    private double[] signal = {0.0,  0.684,  1.192,  1.401,  1.281,  0.894,  0.373, -0.133, -0.504, -0.688, -0.702,
            -0.615, -0.51, -0.44, -0.409, -0.372, -0.263, -0.033,  0.319,  0.726,  1.074,  1.236,  1.121,  0.714,
            0.093, -0.593, -1.163, -1.464, -1.42 , -1.053, -0.476,  0.147, 0.658,  0.948,  0.991,  0.839,  0.588,
            0.338,  0.154,  0.041, -0.041, -0.154, -0.338, -0.588, -0.839, -0.991, -0.948, -0.658, -0.147,  0.476,
            1.053,  1.42 ,  1.464,  1.163,  0.593, -0.093, -0.714, -1.121, -1.236, -1.074, -0.726, -0.319,  0.033,
            0.263, 0.372,  0.409,  0.44 ,  0.51 ,  0.615,  0.702,  0.688,  0.504, 0.133, -0.373, -0.894, -1.281, -1.401,
            -1.192, -0.684,  0.};

    @Test
    public void testFourierAbsolutePositive(){
        double[] result = {0.0,  0.266,  0.59,  1.113,  2.397, 39.963,  2.12 ,  0.154, 18.472,  3.176,  1.859,  1.4,
                1.148,  0.988,  0.877,  0.789, 0.726,  0.673,  0.628,  0.592,  0.557,  0.53 ,  0.506,  0.485, 0.473,
                0.455,  0.444,  0.426,  0.422,  0.411,  0.397,  0.396, 0.387,  0.386,  0.38 ,  0.375,  0.369,  0.368,
                0.366,  0.366};
        DiscreteFourier fft1 = new DiscreteFourier(this.signal);
        fft1.fft();
        double[] out = fft1.returnAbsolute(true);
        assertArrayEquals(out, result, 0.001);
    }

    @Test
    public void testFourierAbsolute(){
        double[] result = {0.0,  0.266,  0.59 ,  1.113,  2.397, 39.963,  2.12,  0.154, 18.472,  3.176,  1.859,  1.4,
                1.148,  0.988,  0.877,  0.789, 0.726,  0.673,  0.628,  0.592,  0.557,  0.53 ,  0.506,  0.485, 0.473,
                0.455,  0.444,  0.426,  0.422,  0.411,  0.397,  0.396, 0.387,  0.386,  0.38 ,  0.375,  0.369,  0.368,
                0.366,  0.366, 0.36 ,  0.366,  0.366,  0.368,  0.369,  0.375,  0.38 ,  0.386, 0.387,  0.396,  0.397,
                0.411,  0.422,  0.426,  0.444,  0.455, 0.473,  0.485,  0.506,  0.53 ,  0.557,  0.592,  0.628,  0.673,
                0.726,  0.789,  0.877,  0.988,  1.148,  1.4,  1.859,  3.176, 18.472,  0.154,  2.12 , 39.963,  2.397,
                1.113,  0.59 ,  0.266};
        DiscreteFourier fft1 = new DiscreteFourier(this.signal);
        fft1.fft();
        double[] out = fft1.returnAbsolute(false);
        assertArrayEquals(out, result, 0.001);
    }

    @Test
    public void testFourierFullPositive(){
        double[] resultReal = {0.0, 0.01, 0.046, 0.131, 0.375, 7.796, -0.495, 0.042, 5.708, -1.099, -0.712, -0.586,
                -0.521, -0.483, -0.458, -0.438, -0.427, -0.416, -0.408, -0.402, -0.394, -0.389, -0.384, -0.381, -0.383,
                -0.378, -0.378, -0.372, -0.376, -0.373, -0.366, -0.371, -0.368, -0.371, -0.369, -0.368, -0.364, -0.366,
                -0.365, -0.366};

        double[] resultIm = {-0.0, -0.266, -0.588, -1.105, -2.367, -39.196, 2.061, -0.148, -17.567, 2.98, 1.718, 1.271,
                1.023, 0.862, 0.748, 0.656, 0.587, 0.528, 0.478, 0.435, 0.394, 0.36, 0.328, 0.3, 0.278, 0.253, 0.232,
                0.208, 0.192, 0.172, 0.152, 0.137, 0.12, 0.105, 0.089, 0.073, 0.058, 0.043, 0.029, 0.014};

        DiscreteFourier fft1 = new DiscreteFourier(this.signal);
        fft1.fft();
        double[][] out = fft1.returnFull(true);

        double[] outReal = new double[out.length];
        double[] outIm = new double[out.length];

        for (int i=0; i<out.length; i++) {
            outReal[i] = out[i][0];
            outIm[i] = out[i][1];
        }
        assertArrayEquals(outReal, resultReal, 0.001);
        assertArrayEquals(outIm, resultIm, 0.001);
    }

    @Test
    public void testFourierFull(){
        double[] resultReal = {0.0, 0.01, 0.046, 0.131, 0.375, 7.796, -0.495, 0.042, 5.708, -1.099, -0.712, -0.586,
                -0.521, -0.483, -0.458, -0.438, -0.427, -0.416, -0.408, -0.402, -0.394, -0.389, -0.384, -0.381, -0.383,
                -0.378, -0.378, -0.372, -0.376, -0.373, -0.366, -0.371, -0.368, -0.371, -0.369, -0.368, -0.364, -0.366,
                -0.365, -0.366, -0.36, -0.366, -0.365, -0.366, -0.364, -0.368, -0.369, -0.371, -0.368, -0.371, -0.366,
                -0.373, -0.376, -0.372, -0.378, -0.378, -0.383, -0.381, -0.384, -0.389, -0.394, -0.402, -0.408, -0.416,
                -0.427, -0.438, -0.458, -0.483, -0.521, -0.586, -0.712, -1.099, 5.708, 0.042, -0.495, 7.796, 0.375,
                0.131, 0.046, 0.01};

        double[] resultIm = {-0.0, -0.266, -0.588, -1.105, -2.367, -39.196, 2.061, -0.148, -17.567, 2.98, 1.718, 1.271,
                1.023, 0.862, 0.748, 0.656, 0.587, 0.528, 0.478, 0.435, 0.394, 0.36, 0.328, 0.3, 0.278, 0.253, 0.232,
                0.208, 0.192, 0.172, 0.152, 0.137, 0.12, 0.105, 0.089, 0.073, 0.058, 0.043, 0.029, 0.014, -0.0, -0.014,
                -0.029, -0.043, -0.058, -0.073, -0.089, -0.105, -0.12, -0.137, -0.152, -0.172, -0.192, -0.208, -0.232,
                -0.253, -0.278, -0.3, -0.328, -0.36, -0.394, -0.435, -0.478, -0.528, -0.587, -0.656, -0.748, -0.862,
                -1.023, -1.271, -1.718, -2.98, 17.567, 0.148, -2.061, 39.196, 2.367, 1.105, 0.588, 0.266};

        DiscreteFourier fft1 = new DiscreteFourier(this.signal);
        fft1.fft();
        double[][] out = fft1.returnFull(false);

        double[] outReal = new double[out.length];
        double[] outIm = new double[out.length];

        for (int i=0; i<out.length; i++) {
            outReal[i] = out[i][0];
            outIm[i] = out[i][1];
        }
        assertArrayEquals(outReal, resultReal, 0.001);
        assertArrayEquals(outIm, resultIm, 0.001);
    }
}
