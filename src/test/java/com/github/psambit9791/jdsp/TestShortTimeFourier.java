package com.github.psambit9791.jdsp;

import com.github.psambit9791.jdsp.misc.Export;
import com.github.psambit9791.jdsp.transform.ShortTimeFourier;
import com.github.psambit9791.jdsp.windows.Rectangular;
import com.github.psambit9791.jdsp.windows._Window;
import org.apache.commons.math3.complex.Complex;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.io.IOException;

public class TestShortTimeFourier {
    // Linear chirp signal starting at 0 Hz, ending at 10 Hz, sampled @ 100 Hz
    private double[] signal1 = {0,  0.0032054,  0.012821,   0.028844    ,0.051264,  0.080049,   0.11514,    0.15642,
            0.20371,    0.25673,    0.31508,    0.3782,     0.44536,    0.5156,     0.58773,    0.66029,
            0.73154,    0.79944,    0.86167,    0.91566,    0.95863,    0.98767,    0.99981,    0.99222,
            0.96229,    0.90789,    0.82756,    0.72074,    0.58799,    0.43124,    0.25394,    0.061185,
            -0.14025,   -0.34202,   -0.53442,   -0.70682,   -0.8482,    -0.9479,    -0.99649,   -0.98675,
            -0.91462,   -0.78017,   -0.58825,   -0.34894,   -0.077492,  0.20622,    0.4789,     0.71561,
            0.89212,    0.98757,    0.98731,    0.88551,    0.68706,    0.40855,    0.077812,   -0.26817,
            -0.58696,   -0.83575,   -0.97747,   -0.98685,   -0.85575,   -0.59652,   -0.24245,   0.15515,
            0.53361,    0.82846,    0.98481,    0.96847,    0.77473,    0.4324,     0.0016027,  -0.43529,
            -0.78872,   -0.9806,    -0.96272,   -0.73066,   -0.32904,   0.15452,    0.60676,    0.91488,
            0.99558,    0.81957,    0.42429,    -0.090588,  -0.58592,   -0.91986,   -0.9895,    -0.76512,
            -0.30533,   0.25425,    0.73849,    0.98726,    0.9103,     0.52354,    -0.048382,  -0.60854,
            -0.95404,   -0.95102,   -0.59032,   -2.9398e-15};

    // 5 Hz sine wave, sampled @ 100 Hz
    private double[] signal2 = {0,  0.0032054,  0.012821,   0.028844    ,0.051264,  0.080049,   0.11514,    0.15642,
            0.20371,    0.25673,    0.31508,    0.3782,     0.44536,    0.5156,     0.58773,    0.66029,
            0.73154,    0.79944,    0.86167,    0.91566,    0.95863,    0.98767,    0.99981,    0.99222,
            0.96229,    0.90789,    0.82756,    0.72074,    0.58799,    0.43124,    0.25394,    0.061185,
            -0.14025,   -0.34202,   -0.53442,   -0.70682,   -0.8482,    -0.9479,    -0.99649,   -0.98675,
            -0.91462,   -0.78017,   -0.58825,   -0.34894,   -0.077492,  0.20622,    0.4789,     0.71561,
            0.89212,    0.98757,    0.98731,    0.88551,    0.68706,    0.40855,    0.077812,   -0.26817,
            -0.58696,   -0.83575,   -0.97747,   -0.98685,   -0.85575,   -0.59652,   -0.24245,   0.15515,
            0.53361,    0.82846,    0.98481,    0.96847,    0.77473,    0.4324,     0.0016027,  -0.43529,
            -0.78872,   -0.9806,    -0.96272,   -0.73066,   -0.32904,   0.15452,    0.60676,    0.91488,
            0.99558,    0.81957,    0.42429,    -0.090588,  -0.58592,   -0.91986,   -0.9895,    -0.76512,
            -0.30533,   0.25425,    0.73849,    0.98726,    0.9103,     0.52354,    -0.048382,  -0.60854,
            -0.95404,   -0.95102,   -0.59032,   -2.9398e-15};

    @Test
    @Order(1)
    public void createTestOutputDirectory() {
        String dirName = "./test_outputs/";
        File directory = new File(dirName);
        if (! directory.exists()){
            directory.mkdir();
        }
    }

    @Test
    public void testSTFT1() {
        // Results calculated with MATLAB R2020b Update 4 9.9.0.1570001
        double[][] resultReal = {{9.613440e-02,4.317170e-01,1.047080e+00,1.910970e+00,2.940520e+00,3.968600e+00,4.723440e+00,4.849880e+00,4.006470e+00,2.055095e+00,-7.015650e-01,-3.379360e+00,-4.693960e+00,-3.618730e+00,-3.295620e-01,3.280420e+00,4.439570e+00,1.790762e+00,-2.590538e+00,-4.252340e+00,-1.005960e+00,3.470500e+00,3.162013e+00,-1.770607e+00,-3.791740e+00,6.164600e-01,3.761080e+00,-3.525080e-01,-3.565730e+00,9.095500e-01,3.111208e+00,-2.038442e+00},
                {-1.687572e-02,-6.488933e-02,-1.116623e-01,-1.528498e-01,-1.789219e-01,-1.745634e-01,-1.210070e-01,-4.050086e-03,1.719413e-01,3.670238e-01,4.978670e-01,4.579555e-01,1.807245e-01,-2.701365e-01,-6.522333e-01,-6.412967e-01,-1.055341e-01,6.214790e-01,8.438846e-01,1.685551e-01,-8.045631e-01,-8.476480e-01,3.079903e-01,1.120118e+00,1.765522e-01,-1.165514e+00,-4.479009e-01,1.213737e+00,4.549929e-01,-1.357536e+00,-1.313817e-01,1.478862e+00},
                {-3.119148e-02,-7.885917e-02,-1.240277e-01,-1.608102e-01,-1.779381e-01,-1.590116e-01,-8.653801e-02,4.828509e-02,2.305487e-01,4.072787e-01,4.877655e-01,3.766745e-01,4.575547e-02,-3.873735e-01,-6.536107e-01,-4.833633e-01,1.160491e-01,6.969150e-01,6.459144e-01,-1.317601e-01,-8.318319e-01,-4.997270e-01,5.730284e-01,8.461856e-01,-2.524822e-01,-9.693661e-01,8.426091e-02,1.011442e+00,-1.369279e-01,-1.010039e+00,4.220027e-01,8.492094e-01},
                {-3.119148e-02,-7.885917e-02,-1.240277e-01,-1.608102e-01,-1.779381e-01,-1.590116e-01,-8.653801e-02,4.828509e-02,2.305487e-01,4.072787e-01,4.877655e-01,3.766745e-01,4.575547e-02,-3.873735e-01,-6.536107e-01,-4.833633e-01,1.160491e-01,6.969150e-01,6.459144e-01,-1.317601e-01,-8.318319e-01,-4.997270e-01,5.730284e-01,8.461856e-01,-2.524822e-01,-9.693661e-01,8.426091e-02,1.011442e+00,-1.369279e-01,-1.010039e+00,4.220027e-01,8.492094e-01},
                {-1.687572e-02,-6.488933e-02,-1.116623e-01,-1.528498e-01,-1.789219e-01,-1.745634e-01,-1.210070e-01,-4.050086e-03,1.719413e-01,3.670238e-01,4.978670e-01,4.579555e-01,1.807245e-01,-2.701365e-01,-6.522333e-01,-6.412967e-01,-1.055341e-01,6.214790e-01,8.438846e-01,1.685551e-01,-8.045631e-01,-8.476480e-01,3.079903e-01,1.120118e+00,1.765522e-01,-1.165514e+00,-4.479009e-01,1.213737e+00,4.549929e-01,-1.357536e+00,-1.313817e-01,1.478862e+00}};
        double[][] resultImag = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {5.512453e-02,1.206353e-01,1.820590e-01,2.301815e-01,2.480208e-01,2.116864e-01,9.710069e-02,-1.050135e-01,-3.670302e-01,-6.052357e-01,-6.850514e-01,-4.763439e-01,3.737619e-02,6.508014e-01,9.540844e-01,5.875239e-01,-3.456385e-01,-1.102881e+00,-8.208195e-01,4.393636e-01,1.308521e+00,5.054767e-01,-1.120762e+00,-1.141871e+00,7.560718e-01,1.448858e+00,-5.700349e-01,-1.569511e+00,7.163400e-01,1.513955e+00,-1.212286e+00,-1.061540e+00},
                {1.300936e-02,2.843562e-02,4.283299e-02,5.398974e-02,5.791769e-02,4.903877e-02,2.184345e-02,-2.556410e-02,-8.644065e-02,-1.410259e-01,-1.581932e-01,-1.085771e-01,1.029820e-02,1.499716e-01,2.167660e-01,1.311177e-01,-7.981779e-02,-2.469196e-01,-1.803027e-01,9.923328e-02,2.861337e-01,1.069066e-01,-2.427352e-01,-2.411924e-01,1.622752e-01,3.010520e-01,-1.209661e-01,-3.189828e-01,1.478136e-01,2.992257e-01,-2.409045e-01,-2.019673e-01},
                {-1.300936e-02,-2.843562e-02,-4.283299e-02,-5.398974e-02,-5.791769e-02,-4.903877e-02,-2.184345e-02,2.556410e-02,8.644065e-02,1.410259e-01,1.581932e-01,1.085771e-01,-1.029820e-02,-1.499716e-01,-2.167660e-01,-1.311177e-01,7.981779e-02,2.469196e-01,1.803027e-01,-9.923328e-02,-2.861337e-01,-1.069066e-01,2.427352e-01,2.411924e-01,-1.622752e-01,-3.010520e-01,1.209661e-01,3.189828e-01,-1.478136e-01,-2.992257e-01,2.409045e-01,2.019673e-01},
                {-5.512453e-02,-1.206353e-01,-1.820590e-01,-2.301815e-01,-2.480208e-01,-2.116864e-01,-9.710069e-02,1.050135e-01,3.670302e-01,6.052357e-01,6.850514e-01,4.763439e-01,-3.737619e-02,-6.508014e-01,-9.540844e-01,-5.875239e-01,3.456385e-01,1.102881e+00,8.208195e-01,-4.393636e-01,-1.308521e+00,-5.054767e-01,1.120762e+00,1.141871e+00,-7.560718e-01,-1.448858e+00,5.700349e-01,1.569511e+00,-7.163400e-01,-1.513955e+00,1.212286e+00,1.061540e+00}};

        int frameLength = 5;
        int overlap = 2;
        double Fs = 100;
        _Window window = new Rectangular(frameLength);

        ShortTimeFourier stft = new ShortTimeFourier(signal1, frameLength, overlap, Fs, window);

        Complex[][] out = stft.getComplex(false);

        for (int c = 0; c < out[0].length; c++) {
            for (int r = 0; r < out.length; r++) {
                Assertions.assertEquals(resultReal[r][c], out[r][c].getReal(), 0.001);
                Assertions.assertEquals(resultImag[r][c], out[r][c].getImaginary(), 0.001);
            }
        }
    }

    @Test
    public void testSTFT2() {
        // Results calculated with MATLAB R2020b Update 4 9.9.0.1570001
        double[][] resultReal = {{9.613440e-02,4.317170e-01,1.047080e+00,1.910970e+00,2.940520e+00,3.968600e+00,4.723440e+00,4.849880e+00,4.006470e+00,2.055095e+00,-7.015650e-01,-3.379360e+00,-4.693960e+00,-3.618730e+00,-3.295620e-01,3.280420e+00,4.439570e+00,1.790762e+00,-2.590538e+00,-4.252340e+00,-1.005960e+00,3.470500e+00,3.162013e+00,-1.770607e+00,-3.791740e+00,6.164600e-01,3.761080e+00,-3.525080e-01,-3.565730e+00,9.095500e-01,3.111208e+00,-2.038442e+00},
                {-1.687572e-02,-6.488933e-02,-1.116623e-01,-1.528498e-01,-1.789219e-01,-1.745634e-01,-1.210070e-01,-4.050086e-03,1.719413e-01,3.670238e-01,4.978670e-01,4.579555e-01,1.807245e-01,-2.701365e-01,-6.522333e-01,-6.412967e-01,-1.055341e-01,6.214790e-01,8.438846e-01,1.685551e-01,-8.045631e-01,-8.476480e-01,3.079903e-01,1.120118e+00,1.765522e-01,-1.165514e+00,-4.479009e-01,1.213737e+00,4.549929e-01,-1.357536e+00,-1.313817e-01,1.478862e+00},
                {-3.119148e-02,-7.885917e-02,-1.240277e-01,-1.608102e-01,-1.779381e-01,-1.590116e-01,-8.653801e-02,4.828509e-02,2.305487e-01,4.072787e-01,4.877655e-01,3.766745e-01,4.575547e-02,-3.873735e-01,-6.536107e-01,-4.833633e-01,1.160491e-01,6.969150e-01,6.459144e-01,-1.317601e-01,-8.318319e-01,-4.997270e-01,5.730284e-01,8.461856e-01,-2.524822e-01,-9.693661e-01,8.426091e-02,1.011442e+00,-1.369279e-01,-1.010039e+00,4.220027e-01,8.492094e-01},
                {-3.119148e-02,-7.885917e-02,-1.240277e-01,-1.608102e-01,-1.779381e-01,-1.590116e-01,-8.653801e-02,4.828509e-02,2.305487e-01,4.072787e-01,4.877655e-01,3.766745e-01,4.575547e-02,-3.873735e-01,-6.536107e-01,-4.833633e-01,1.160491e-01,6.969150e-01,6.459144e-01,-1.317601e-01,-8.318319e-01,-4.997270e-01,5.730284e-01,8.461856e-01,-2.524822e-01,-9.693661e-01,8.426091e-02,1.011442e+00,-1.369279e-01,-1.010039e+00,4.220027e-01,8.492094e-01},
                {-1.687572e-02,-6.488933e-02,-1.116623e-01,-1.528498e-01,-1.789219e-01,-1.745634e-01,-1.210070e-01,-4.050086e-03,1.719413e-01,3.670238e-01,4.978670e-01,4.579555e-01,1.807245e-01,-2.701365e-01,-6.522333e-01,-6.412967e-01,-1.055341e-01,6.214790e-01,8.438846e-01,1.685551e-01,-8.045631e-01,-8.476480e-01,3.079903e-01,1.120118e+00,1.765522e-01,-1.165514e+00,-4.479009e-01,1.213737e+00,4.549929e-01,-1.357536e+00,-1.313817e-01,1.478862e+00}};
        double[][] resultImag = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {5.512453e-02,1.206353e-01,1.820590e-01,2.301815e-01,2.480208e-01,2.116864e-01,9.710069e-02,-1.050135e-01,-3.670302e-01,-6.052357e-01,-6.850514e-01,-4.763439e-01,3.737619e-02,6.508014e-01,9.540844e-01,5.875239e-01,-3.456385e-01,-1.102881e+00,-8.208195e-01,4.393636e-01,1.308521e+00,5.054767e-01,-1.120762e+00,-1.141871e+00,7.560718e-01,1.448858e+00,-5.700349e-01,-1.569511e+00,7.163400e-01,1.513955e+00,-1.212286e+00,-1.061540e+00},
                {1.300936e-02,2.843562e-02,4.283299e-02,5.398974e-02,5.791769e-02,4.903877e-02,2.184345e-02,-2.556410e-02,-8.644065e-02,-1.410259e-01,-1.581932e-01,-1.085771e-01,1.029820e-02,1.499716e-01,2.167660e-01,1.311177e-01,-7.981779e-02,-2.469196e-01,-1.803027e-01,9.923328e-02,2.861337e-01,1.069066e-01,-2.427352e-01,-2.411924e-01,1.622752e-01,3.010520e-01,-1.209661e-01,-3.189828e-01,1.478136e-01,2.992257e-01,-2.409045e-01,-2.019673e-01},
                {-1.300936e-02,-2.843562e-02,-4.283299e-02,-5.398974e-02,-5.791769e-02,-4.903877e-02,-2.184345e-02,2.556410e-02,8.644065e-02,1.410259e-01,1.581932e-01,1.085771e-01,-1.029820e-02,-1.499716e-01,-2.167660e-01,-1.311177e-01,7.981779e-02,2.469196e-01,1.803027e-01,-9.923328e-02,-2.861337e-01,-1.069066e-01,2.427352e-01,2.411924e-01,-1.622752e-01,-3.010520e-01,1.209661e-01,3.189828e-01,-1.478136e-01,-2.992257e-01,2.409045e-01,2.019673e-01},
                {-5.512453e-02,-1.206353e-01,-1.820590e-01,-2.301815e-01,-2.480208e-01,-2.116864e-01,-9.710069e-02,1.050135e-01,3.670302e-01,6.052357e-01,6.850514e-01,4.763439e-01,-3.737619e-02,-6.508014e-01,-9.540844e-01,-5.875239e-01,3.456385e-01,1.102881e+00,8.208195e-01,-4.393636e-01,-1.308521e+00,-5.054767e-01,1.120762e+00,1.141871e+00,-7.560718e-01,-1.448858e+00,5.700349e-01,1.569511e+00,-7.163400e-01,-1.513955e+00,1.212286e+00,1.061540e+00}};

        int frameLength = 5;
        int overlap = 2;
        double Fs = 100;
        _Window window = new Rectangular(frameLength);

        ShortTimeFourier stft = new ShortTimeFourier(signal2, frameLength, overlap, Fs, window);

        Complex[][] out = stft.getComplex(false);

        for (int c = 0; c < out[0].length; c++) {
            for (int r = 0; r < out.length; r++) {
                Assertions.assertEquals(resultReal[r][c], out[r][c].getReal(), 0.001);
                Assertions.assertEquals(resultImag[r][c], out[r][c].getImaginary(), 0.001);
            }
        }
    }

    @Test
    public void testSTFTPositive1() {
        // Results calculated with MATLAB R2020b Update 4 9.9.0.1570001
        double[][] resultReal = {{9.613440e-02,4.317170e-01,1.047080e+00,1.910970e+00,2.940520e+00,3.968600e+00,4.723440e+00,4.849880e+00,4.006470e+00,2.055095e+00,-7.015650e-01,-3.379360e+00,-4.693960e+00,-3.618730e+00,-3.295620e-01,3.280420e+00,4.439570e+00,1.790762e+00,-2.590538e+00,-4.252340e+00,-1.005960e+00,3.470500e+00,3.162013e+00,-1.770607e+00,-3.791740e+00,6.164600e-01,3.761080e+00,-3.525080e-01,-3.565730e+00,9.095500e-01,3.111208e+00,-2.038442e+00},
                {-1.687572e-02,-6.488933e-02,-1.116623e-01,-1.528498e-01,-1.789219e-01,-1.745634e-01,-1.210070e-01,-4.050086e-03,1.719413e-01,3.670238e-01,4.978670e-01,4.579555e-01,1.807245e-01,-2.701365e-01,-6.522333e-01,-6.412967e-01,-1.055341e-01,6.214790e-01,8.438846e-01,1.685551e-01,-8.045631e-01,-8.476480e-01,3.079903e-01,1.120118e+00,1.765522e-01,-1.165514e+00,-4.479009e-01,1.213737e+00,4.549929e-01,-1.357536e+00,-1.313817e-01,1.478862e+00},
                {-3.119148e-02,-7.885917e-02,-1.240277e-01,-1.608102e-01,-1.779381e-01,-1.590116e-01,-8.653801e-02,4.828509e-02,2.305487e-01,4.072787e-01,4.877655e-01,3.766745e-01,4.575547e-02,-3.873735e-01,-6.536107e-01,-4.833633e-01,1.160491e-01,6.969150e-01,6.459144e-01,-1.317601e-01,-8.318319e-01,-4.997270e-01,5.730284e-01,8.461856e-01,-2.524822e-01,-9.693661e-01,8.426091e-02,1.011442e+00,-1.369279e-01,-1.010039e+00,4.220027e-01,8.492094e-01}};
        double[][] resultImag = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {5.512453e-02,1.206353e-01,1.820590e-01,2.301815e-01,2.480208e-01,2.116864e-01,9.710069e-02,-1.050135e-01,-3.670302e-01,-6.052357e-01,-6.850514e-01,-4.763439e-01,3.737619e-02,6.508014e-01,9.540844e-01,5.875239e-01,-3.456385e-01,-1.102881e+00,-8.208195e-01,4.393636e-01,1.308521e+00,5.054767e-01,-1.120762e+00,-1.141871e+00,7.560718e-01,1.448858e+00,-5.700349e-01,-1.569511e+00,7.163400e-01,1.513955e+00,-1.212286e+00,-1.061540e+00},
                {1.300936e-02,2.843562e-02,4.283299e-02,5.398974e-02,5.791769e-02,4.903877e-02,2.184345e-02,-2.556410e-02,-8.644065e-02,-1.410259e-01,-1.581932e-01,-1.085771e-01,1.029820e-02,1.499716e-01,2.167660e-01,1.311177e-01,-7.981779e-02,-2.469196e-01,-1.803027e-01,9.923328e-02,2.861337e-01,1.069066e-01,-2.427352e-01,-2.411924e-01,1.622752e-01,3.010520e-01,-1.209661e-01,-3.189828e-01,1.478136e-01,2.992257e-01,-2.409045e-01,-2.019673e-01}};

        int frameLength = 5;
        int overlap = 2;
        double Fs = 100;
        _Window window = new Rectangular(frameLength);

        ShortTimeFourier stft = new ShortTimeFourier(signal1, frameLength, overlap, Fs, window);

        Complex[][] out = stft.getComplex(true);

        for (int c = 0; c < out[0].length; c++) {
            for (int r = 0; r < out.length; r++) {
                Assertions.assertEquals(resultReal[r][c], out[r][c].getReal(), 0.001);
                Assertions.assertEquals(resultImag[r][c], out[r][c].getImaginary(), 0.001);
            }
        }
    }

    @Test
    public void testSTFTPositive2() {
        // Results calculated with MATLAB R2020b Update 4 9.9.0.1570001
        double[][] resultReal = {{9.613440e-02,4.317170e-01,1.047080e+00,1.910970e+00,2.940520e+00,3.968600e+00,4.723440e+00,4.849880e+00,4.006470e+00,2.055095e+00,-7.015650e-01,-3.379360e+00,-4.693960e+00,-3.618730e+00,-3.295620e-01,3.280420e+00,4.439570e+00,1.790762e+00,-2.590538e+00,-4.252340e+00,-1.005960e+00,3.470500e+00,3.162013e+00,-1.770607e+00,-3.791740e+00,6.164600e-01,3.761080e+00,-3.525080e-01,-3.565730e+00,9.095500e-01,3.111208e+00,-2.038442e+00},
                {-1.687572e-02,-6.488933e-02,-1.116623e-01,-1.528498e-01,-1.789219e-01,-1.745634e-01,-1.210070e-01,-4.050086e-03,1.719413e-01,3.670238e-01,4.978670e-01,4.579555e-01,1.807245e-01,-2.701365e-01,-6.522333e-01,-6.412967e-01,-1.055341e-01,6.214790e-01,8.438846e-01,1.685551e-01,-8.045631e-01,-8.476480e-01,3.079903e-01,1.120118e+00,1.765522e-01,-1.165514e+00,-4.479009e-01,1.213737e+00,4.549929e-01,-1.357536e+00,-1.313817e-01,1.478862e+00},
                {-3.119148e-02,-7.885917e-02,-1.240277e-01,-1.608102e-01,-1.779381e-01,-1.590116e-01,-8.653801e-02,4.828509e-02,2.305487e-01,4.072787e-01,4.877655e-01,3.766745e-01,4.575547e-02,-3.873735e-01,-6.536107e-01,-4.833633e-01,1.160491e-01,6.969150e-01,6.459144e-01,-1.317601e-01,-8.318319e-01,-4.997270e-01,5.730284e-01,8.461856e-01,-2.524822e-01,-9.693661e-01,8.426091e-02,1.011442e+00,-1.369279e-01,-1.010039e+00,4.220027e-01,8.492094e-01}};
        double[][] resultImag = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {5.512453e-02,1.206353e-01,1.820590e-01,2.301815e-01,2.480208e-01,2.116864e-01,9.710069e-02,-1.050135e-01,-3.670302e-01,-6.052357e-01,-6.850514e-01,-4.763439e-01,3.737619e-02,6.508014e-01,9.540844e-01,5.875239e-01,-3.456385e-01,-1.102881e+00,-8.208195e-01,4.393636e-01,1.308521e+00,5.054767e-01,-1.120762e+00,-1.141871e+00,7.560718e-01,1.448858e+00,-5.700349e-01,-1.569511e+00,7.163400e-01,1.513955e+00,-1.212286e+00,-1.061540e+00},
                {1.300936e-02,2.843562e-02,4.283299e-02,5.398974e-02,5.791769e-02,4.903877e-02,2.184345e-02,-2.556410e-02,-8.644065e-02,-1.410259e-01,-1.581932e-01,-1.085771e-01,1.029820e-02,1.499716e-01,2.167660e-01,1.311177e-01,-7.981779e-02,-2.469196e-01,-1.803027e-01,9.923328e-02,2.861337e-01,1.069066e-01,-2.427352e-01,-2.411924e-01,1.622752e-01,3.010520e-01,-1.209661e-01,-3.189828e-01,1.478136e-01,2.992257e-01,-2.409045e-01,-2.019673e-01}};

        int frameLength = 5;
        int overlap = 2;
        double Fs = 100;
        _Window window = new Rectangular(frameLength);

        ShortTimeFourier stft = new ShortTimeFourier(signal2, frameLength, overlap, Fs, window);

        Complex[][] out = stft.getComplex(true);

        for (int c = 0; c < out[0].length; c++) {
            for (int r = 0; r < out.length; r++) {
                Assertions.assertEquals(resultReal[r][c], out[r][c].getReal(), 0.001);
                Assertions.assertEquals(resultImag[r][c], out[r][c].getImaginary(), 0.001);
            }
        }
    }


    @Test
    public void testSpectrogram1() throws IOException {
        // Results calculated with MATLAB R2020b Update 4 9.9.0.1570001
        double[][] result = {{9.241823e-03,1.863796e-01,1.096377e+00,3.651806e+00,8.646658e+00,1.574979e+01,2.231089e+01,2.352134e+01,1.605180e+01,4.223415e+00,4.921934e-01,1.142007e+01,2.203326e+01,1.309521e+01,1.086111e-01,1.076116e+01,1.970978e+01,3.206829e+00,6.710887e+00,1.808240e+01,1.011956e+00,1.204437e+01,9.998324e+00,3.135050e+00,1.437729e+01,3.800229e-01,1.414572e+01,1.242619e-01,1.271443e+01,8.272812e-01,9.679615e+00,4.155246e+00},
                {3.323504e-03,1.876349e-02,4.561394e-02,7.634659e-02,9.352740e-02,7.528352e-02,2.407124e-02,1.104424e-02,1.642750e-01,5.010167e-01,7.171670e-01,4.366268e-01,3.405834e-02,4.965162e-01,1.335685e+00,7.564458e-01,1.306034e-01,1.602582e+00,1.385886e+00,2.214512e-01,2.359549e+00,9.740138e-01,1.350965e+00,2.558534e+00,6.028153e-01,3.457613e+00,5.255550e-01,3.936524e+00,7.201615e-01,4.134963e+00,1.486898e+00,3.313898e+00},
                {1.142152e-03,7.027353e-03,1.721754e-02,2.877481e-02,3.501641e-02,2.768948e-02,7.965963e-03,2.984973e-03,6.062467e-02,1.857642e-01,2.629403e-01,1.536726e-01,2.199616e-03,1.725497e-01,4.741945e-01,2.508319e-01,1.983827e-02,5.466598e-01,4.497144e-01,2.720796e-02,7.738168e-01,2.611561e-01,3.872819e-01,7.742038e-01,9.008049e-02,1.030303e+00,2.173270e-02,1.124765e+00,4.059810e-02,1.109716e+00,2.361212e-01,7.619474e-01},
                {1.142152e-03,7.027353e-03,1.721754e-02,2.877481e-02,3.501641e-02,2.768948e-02,7.965963e-03,2.984973e-03,6.062467e-02,1.857642e-01,2.629403e-01,1.536726e-01,2.199616e-03,1.725497e-01,4.741945e-01,2.508319e-01,1.983827e-02,5.466598e-01,4.497144e-01,2.720796e-02,7.738168e-01,2.611561e-01,3.872819e-01,7.742038e-01,9.008049e-02,1.030303e+00,2.173270e-02,1.124765e+00,4.059810e-02,1.109716e+00,2.361212e-01,7.619474e-01},
                {3.323504e-03,1.876349e-02,4.561394e-02,7.634659e-02,9.352740e-02,7.528352e-02,2.407124e-02,1.104424e-02,1.642750e-01,5.010167e-01,7.171670e-01,4.366268e-01,3.405834e-02,4.965162e-01,1.335685e+00,7.564458e-01,1.306034e-01,1.602582e+00,1.385886e+00,2.214512e-01,2.359549e+00,9.740138e-01,1.350965e+00,2.558534e+00,6.028153e-01,3.457613e+00,5.255550e-01,3.936524e+00,7.201615e-01,4.134963e+00,1.486898e+00,3.313898e+00}};

        int frameLength = 5;
        int overlap = 2;
        double Fs = 100;
        _Window window = new Rectangular(frameLength);

        ShortTimeFourier stft = new ShortTimeFourier(signal1, frameLength, overlap, Fs, window);
        double[][] out = stft.spectrogram(false);
        String filePath = "test_outputs/testSpectrogram1.csv";
        Export.toCSV(out, filePath);

        for (int i = 0; i < result.length; i++) {
            Assertions.assertArrayEquals(result[i], out[i], 0.001);
        }
    }

    @Test
    public void testSpectrogram2() throws IOException {
        // Results calculated with MATLAB R2020b Update 4 9.9.0.1570001
        double[][] result = {{9.241823e-03,1.863796e-01,1.096377e+00,3.651806e+00,8.646658e+00,1.574979e+01,2.231089e+01,2.352134e+01,1.605180e+01,4.223415e+00,4.921934e-01,1.142007e+01,2.203326e+01,1.309521e+01,1.086111e-01,1.076116e+01,1.970978e+01,3.206829e+00,6.710887e+00,1.808240e+01,1.011956e+00,1.204437e+01,9.998324e+00,3.135050e+00,1.437729e+01,3.800229e-01,1.414572e+01,1.242619e-01,1.271443e+01,8.272812e-01,9.679615e+00,4.155246e+00},
                {3.323504e-03,1.876349e-02,4.561394e-02,7.634659e-02,9.352740e-02,7.528352e-02,2.407124e-02,1.104424e-02,1.642750e-01,5.010167e-01,7.171670e-01,4.366268e-01,3.405834e-02,4.965162e-01,1.335685e+00,7.564458e-01,1.306034e-01,1.602582e+00,1.385886e+00,2.214512e-01,2.359549e+00,9.740138e-01,1.350965e+00,2.558534e+00,6.028153e-01,3.457613e+00,5.255550e-01,3.936524e+00,7.201615e-01,4.134963e+00,1.486898e+00,3.313898e+00},
                {1.142152e-03,7.027353e-03,1.721754e-02,2.877481e-02,3.501641e-02,2.768948e-02,7.965963e-03,2.984973e-03,6.062467e-02,1.857642e-01,2.629403e-01,1.536726e-01,2.199616e-03,1.725497e-01,4.741945e-01,2.508319e-01,1.983827e-02,5.466598e-01,4.497144e-01,2.720796e-02,7.738168e-01,2.611561e-01,3.872819e-01,7.742038e-01,9.008049e-02,1.030303e+00,2.173270e-02,1.124765e+00,4.059810e-02,1.109716e+00,2.361212e-01,7.619474e-01},
                {1.142152e-03,7.027353e-03,1.721754e-02,2.877481e-02,3.501641e-02,2.768948e-02,7.965963e-03,2.984973e-03,6.062467e-02,1.857642e-01,2.629403e-01,1.536726e-01,2.199616e-03,1.725497e-01,4.741945e-01,2.508319e-01,1.983827e-02,5.466598e-01,4.497144e-01,2.720796e-02,7.738168e-01,2.611561e-01,3.872819e-01,7.742038e-01,9.008049e-02,1.030303e+00,2.173270e-02,1.124765e+00,4.059810e-02,1.109716e+00,2.361212e-01,7.619474e-01},
                {3.323504e-03,1.876349e-02,4.561394e-02,7.634659e-02,9.352740e-02,7.528352e-02,2.407124e-02,1.104424e-02,1.642750e-01,5.010167e-01,7.171670e-01,4.366268e-01,3.405834e-02,4.965162e-01,1.335685e+00,7.564458e-01,1.306034e-01,1.602582e+00,1.385886e+00,2.214512e-01,2.359549e+00,9.740138e-01,1.350965e+00,2.558534e+00,6.028153e-01,3.457613e+00,5.255550e-01,3.936524e+00,7.201615e-01,4.134963e+00,1.486898e+00,3.313898e+00}};

        int frameLength = 5;
        int overlap = 2;
        double Fs = 100;
        _Window window = new Rectangular(frameLength);

        ShortTimeFourier stft = new ShortTimeFourier(signal2, frameLength, overlap, Fs, window);
        double[][] out = stft.spectrogram(false);
        String filePath = "test_outputs/testSpectrogram2.csv";
        Export.toCSV(out, filePath);

        for (int i = 0; i < result.length; i++) {
            Assertions.assertArrayEquals(result[i], out[i], 0.001);
        }
    }

    @Test
    public void testSpectrogramPositive1() throws IOException {
        // Results calculated with MATLAB R2020b Update 4 9.9.0.1570001
        double[][] result = {{9.241823e-03,1.863796e-01,1.096377e+00,3.651806e+00,8.646658e+00,1.574979e+01,2.231089e+01,2.352134e+01,1.605180e+01,4.223415e+00,4.921934e-01,1.142007e+01,2.203326e+01,1.309521e+01,1.086111e-01,1.076116e+01,1.970978e+01,3.206829e+00,6.710887e+00,1.808240e+01,1.011956e+00,1.204437e+01,9.998324e+00,3.135050e+00,1.437729e+01,3.800229e-01,1.414572e+01,1.242619e-01,1.271443e+01,8.272812e-01,9.679615e+00,4.155246e+00},
                {3.323504e-03,1.876349e-02,4.561394e-02,7.634659e-02,9.352740e-02,7.528352e-02,2.407124e-02,1.104424e-02,1.642750e-01,5.010167e-01,7.171670e-01,4.366268e-01,3.405834e-02,4.965162e-01,1.335685e+00,7.564458e-01,1.306034e-01,1.602582e+00,1.385886e+00,2.214512e-01,2.359549e+00,9.740138e-01,1.350965e+00,2.558534e+00,6.028153e-01,3.457613e+00,5.255550e-01,3.936524e+00,7.201615e-01,4.134963e+00,1.486898e+00,3.313898e+00},
                {1.142152e-03,7.027353e-03,1.721754e-02,2.877481e-02,3.501641e-02,2.768948e-02,7.965963e-03,2.984973e-03,6.062467e-02,1.857642e-01,2.629403e-01,1.536726e-01,2.199616e-03,1.725497e-01,4.741945e-01,2.508319e-01,1.983827e-02,5.466598e-01,4.497144e-01,2.720796e-02,7.738168e-01,2.611561e-01,3.872819e-01,7.742038e-01,9.008049e-02,1.030303e+00,2.173270e-02,1.124765e+00,4.059810e-02,1.109716e+00,2.361212e-01,7.619474e-01}};

        int frameLength = 5;
        int overlap = 2;
        double Fs = 100;
        _Window window = new Rectangular(frameLength);

        ShortTimeFourier stft = new ShortTimeFourier(signal1, frameLength, overlap, Fs, window);
        double[][] out = stft.spectrogram(true);
        String filePath = "test_outputs/testSpectrogramPositive1.csv";
        Export.toCSV(out, filePath);

        for (int i = 0; i < result.length; i++) {
            Assertions.assertArrayEquals(result[i], out[i], 0.001);
        }
    }

    @Test
    public void testSpectrogramPositive2() throws IOException {
        // Results calculated with MATLAB R2020b Update 4 9.9.0.1570001
        double[][] result = {{9.241823e-03,1.863796e-01,1.096377e+00,3.651806e+00,8.646658e+00,1.574979e+01,2.231089e+01,2.352134e+01,1.605180e+01,4.223415e+00,4.921934e-01,1.142007e+01,2.203326e+01,1.309521e+01,1.086111e-01,1.076116e+01,1.970978e+01,3.206829e+00,6.710887e+00,1.808240e+01,1.011956e+00,1.204437e+01,9.998324e+00,3.135050e+00,1.437729e+01,3.800229e-01,1.414572e+01,1.242619e-01,1.271443e+01,8.272812e-01,9.679615e+00,4.155246e+00},
                {3.323504e-03,1.876349e-02,4.561394e-02,7.634659e-02,9.352740e-02,7.528352e-02,2.407124e-02,1.104424e-02,1.642750e-01,5.010167e-01,7.171670e-01,4.366268e-01,3.405834e-02,4.965162e-01,1.335685e+00,7.564458e-01,1.306034e-01,1.602582e+00,1.385886e+00,2.214512e-01,2.359549e+00,9.740138e-01,1.350965e+00,2.558534e+00,6.028153e-01,3.457613e+00,5.255550e-01,3.936524e+00,7.201615e-01,4.134963e+00,1.486898e+00,3.313898e+00},
                {1.142152e-03,7.027353e-03,1.721754e-02,2.877481e-02,3.501641e-02,2.768948e-02,7.965963e-03,2.984973e-03,6.062467e-02,1.857642e-01,2.629403e-01,1.536726e-01,2.199616e-03,1.725497e-01,4.741945e-01,2.508319e-01,1.983827e-02,5.466598e-01,4.497144e-01,2.720796e-02,7.738168e-01,2.611561e-01,3.872819e-01,7.742038e-01,9.008049e-02,1.030303e+00,2.173270e-02,1.124765e+00,4.059810e-02,1.109716e+00,2.361212e-01,7.619474e-01}};

        int frameLength = 5;
        int overlap = 2;
        double Fs = 100;
        _Window window = new Rectangular(frameLength);

        ShortTimeFourier stft = new ShortTimeFourier(signal2, frameLength, overlap, Fs, window);
        double[][] out = stft.spectrogram(true);
        String filePath = "test_outputs/testSpectrogramPositive2.csv";
        Export.toCSV(out, filePath);

        for (int i = 0; i < result.length; i++) {
            Assertions.assertArrayEquals(result[i], out[i], 0.001);
        }
    }

    @Test
    public void testFrequencyAxis1() {
        double[] result = {0,20,40,60,80};

        int frameLength = 5;
        int overlap = 2;
        double Fs = 100;
        _Window window = new Rectangular(frameLength);

        ShortTimeFourier stft = new ShortTimeFourier(signal1, frameLength, overlap, Fs, window);
        stft.stft();
        double[] out = stft.getFrequencyAxis(false);

        Assertions.assertArrayEquals(result, out, 0.001);
    }

    @Test
    public void testFrequencyAxis2() {
        double[] result = {0,20,40,60,80};

        int frameLength = 5;
        int overlap = 2;
        double Fs = 100;
        _Window window = new Rectangular(frameLength);

        ShortTimeFourier stft = new ShortTimeFourier(signal2, frameLength, overlap, Fs, window);
        stft.stft();
        double[] out = stft.getFrequencyAxis(false);

        Assertions.assertArrayEquals(result, out, 0.001);
    }

    @Test
    public void testFrequencyAxisPositive1() {
        double[] result = {0,20,40};

        int frameLength = 5;
        int overlap = 2;
        double Fs = 100;
        _Window window = new Rectangular(frameLength);

        ShortTimeFourier stft = new ShortTimeFourier(signal1, frameLength, overlap, Fs, window);
        stft.stft();
        double[] out = stft.getFrequencyAxis(true);

        Assertions.assertArrayEquals(result, out, 0.001);
    }

    @Test
    public void testFrequencyAxisPositive2() {
        double[] result = {0,20,40};

        int frameLength = 5;
        int overlap = 2;
        double Fs = 100;
        _Window window = new Rectangular(frameLength);

        ShortTimeFourier stft = new ShortTimeFourier(signal2, frameLength, overlap, Fs, window);
        stft.stft();
        double[] out = stft.getFrequencyAxis(true);

        Assertions.assertArrayEquals(result, out, 0.001);
    }

    @Test
    public void testTimeAxis1() {
        double[] result = {0,3.000000e-02,6.000000e-02,9.000000e-02,1.200000e-01,1.500000e-01,1.800000e-01,2.100000e-01,2.400000e-01,2.700000e-01,3.000000e-01,3.300000e-01,3.600000e-01,3.900000e-01,4.200000e-01,4.500000e-01,4.800000e-01,5.100000e-01,5.400000e-01,5.700000e-01,6.000000e-01,6.300000e-01,6.600000e-01,6.900000e-01,7.200000e-01,7.500000e-01,7.800000e-01,8.100000e-01,8.400000e-01,8.700000e-01,9.000000e-01,9.300000e-01};

        int frameLength = 5;
        int overlap = 2;
        double Fs = 100;
        _Window window = new Rectangular(frameLength);

        ShortTimeFourier stft = new ShortTimeFourier(signal1, frameLength, overlap, Fs, window);
        stft.stft();
        double[] out = stft.getTimeAxis();

        Assertions.assertArrayEquals(result, out, 0.001);
    }

    @Test
    public void testTimeAxis2() {
        double[] result = {0,3.000000e-02,6.000000e-02,9.000000e-02,1.200000e-01,1.500000e-01,1.800000e-01,2.100000e-01,2.400000e-01,2.700000e-01,3.000000e-01,3.300000e-01,3.600000e-01,3.900000e-01,4.200000e-01,4.500000e-01,4.800000e-01,5.100000e-01,5.400000e-01,5.700000e-01,6.000000e-01,6.300000e-01,6.600000e-01,6.900000e-01,7.200000e-01,7.500000e-01,7.800000e-01,8.100000e-01,8.400000e-01,8.700000e-01,9.000000e-01,9.300000e-01};

        int frameLength = 5;
        int overlap = 2;
        double Fs = 100;
        _Window window = new Rectangular(frameLength);

        ShortTimeFourier stft = new ShortTimeFourier(signal2, frameLength, overlap, Fs, window);
        stft.stft();
        double[] out = stft.getTimeAxis();

        Assertions.assertArrayEquals(result, out, 0.001);
    }
}
